package eakimov.torrent.gui;

import javax.swing.*;

import eakimov.torrent.GuiClient;
import eakimov.torrent.client.FileStatus;
import eakimov.torrent.common.FileInformation;
import rx.Subscriber;
import rx.schedulers.Schedulers;
import rx.subjects.PublishSubject;

import java.io.File;
import java.util.List;

public class TorrentGUI extends javax.swing.JFrame {
    private final PublishSubject<Boolean> exitObservable = PublishSubject.create();
    private final PublishSubject<Boolean> trackerFilesObservable = PublishSubject.create();
    private final PublishSubject<GuiClient.DownloadInfo> downloadObservable = PublishSubject.create();
    private final PublishSubject<File> uploadObservable = PublishSubject.create();

    private final DefaultListModel<FileInformation> trackerFilesModel = new DefaultListModel<>();
    private final Subscriber<List<FileInformation>> trackerFilesSubscriber = new TrackerFilesSubscriber();
    private final DefaultListModel<FileStatus> localFilesModel = new DefaultListModel<>();
    private final Subscriber<FileStatus> progressSubscriber = new ProgressSubscriber();

    public TorrentGUI() {
        initComponents();
    }

    public void subscribeExit(Subscriber<Boolean> subscriber) {
        exitObservable.observeOn(Schedulers.newThread()).subscribe(subscriber);
    }

    public void subscribeUpdate(Subscriber<Boolean> subscriber) {
        trackerFilesObservable.observeOn(Schedulers.newThread()).subscribe(subscriber);
    }

    public void subscribeDownload(Subscriber<GuiClient.DownloadInfo> subscriber) {
        downloadObservable.observeOn(Schedulers.newThread()).subscribe(subscriber);
    }

    public void subscribeUpload(Subscriber<File> subscriber) {
        uploadObservable.observeOn(Schedulers.newThread()).subscribe(subscriber);
    }

    public Subscriber<List<FileInformation>> getTrackerFilesSubscriber() {
        return trackerFilesSubscriber;
    }

    public Subscriber<FileStatus> getProgressSubscriber() {
        return progressSubscriber;
    }

    private class TrackerFilesSubscriber extends Subscriber<List<FileInformation>> {
        @Override
        public void onCompleted() {}

        @Override
        public void onError(Throwable error) {
            SwingUtilities.invokeLater(() -> {
                updateButton.setEnabled(true);
                showError(error);
            });
        }

        @Override
        public void onNext(List<FileInformation> files) {
            trackerFilesModel.clear();
            for(FileInformation file : files) {
                trackerFilesModel.addElement(file);
            }
            SwingUtilities.invokeLater(() -> updateButton.setEnabled(true));
        }
    }

    private class ProgressSubscriber extends Subscriber<FileStatus> {
        @Override
        public void onCompleted() {}

        @Override
        public void onError(Throwable error) {
            SwingUtilities.invokeLater(() -> showError(error));
        }

        @Override
        public void onNext(FileStatus fileStatus) {
            if (!localFilesModel.contains(fileStatus)) {
                localFilesModel.addElement(fileStatus);
            }
        }
    }

    private ListModel<FileInformation> getTrackerFilesModel() {
        return trackerFilesModel;
    }

    private ListModel<FileStatus> getLocalFilesModel() {
        return localFilesModel;
    }

    private void showError(Throwable error) {
        JOptionPane.showMessageDialog(null,
                "error occurred: " + error.getMessage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trackerFilesLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        trackerFilesScrollPane = new javax.swing.JScrollPane();
        trackerFilesList = new javax.swing.JList<>();
        downloadButton = new javax.swing.JButton();
        localFilesScrollPane = new javax.swing.JScrollPane();
        localFilesList = new javax.swing.JList<>();
        localFilesLabel = new javax.swing.JLabel();
        uploadFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Torrent GUI");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        trackerFilesLabel.setText("Available files:");

        updateButton.setText("update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        trackerFilesList.setModel(getTrackerFilesModel());
        trackerFilesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                trackerFilesListValueChanged(evt);
            }
        });
        trackerFilesScrollPane.setViewportView(trackerFilesList);

        downloadButton.setText("download");
        downloadButton.setEnabled(false);
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        localFilesList.setModel(getLocalFilesModel());
        localFilesScrollPane.setViewportView(localFilesList);

        localFilesLabel.setText("Downloaded files:");

        uploadFileButton.setText("upload new file");
        uploadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trackerFilesScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(trackerFilesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 388, Short.MAX_VALUE)
                        .addComponent(updateButton))
                    .addComponent(localFilesScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(downloadButton)
                            .addComponent(localFilesLabel)
                            .addComponent(uploadFileButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trackerFilesLabel)
                    .addComponent(updateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackerFilesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downloadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(localFilesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(localFilesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uploadFileButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        trackerFilesObservable.onNext(true);
        updateButton.setEnabled(false);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        final FileInformation selectedValue = trackerFilesList.getSelectedValue();
        final JFileChooser chooser = new JFileChooser();
        if (selectedValue != null && chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            downloadObservable.onNext(new GuiClient.DownloadInfo(chooser.getSelectedFile(), selectedValue));
        }
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void uploadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFileButtonActionPerformed
        final JFileChooser chooser = new JFileChooser();
        if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            uploadObservable.onNext(chooser.getSelectedFile());
        }
    }//GEN-LAST:event_uploadFileButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exitObservable.onCompleted();
    }//GEN-LAST:event_formWindowClosing

    private void trackerFilesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_trackerFilesListValueChanged
        downloadButton.setEnabled(trackerFilesList.getSelectedValue() != null);
    }//GEN-LAST:event_trackerFilesListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadButton;
    private javax.swing.JLabel localFilesLabel;
    private javax.swing.JList<FileStatus> localFilesList;
    private javax.swing.JScrollPane localFilesScrollPane;
    private javax.swing.JLabel trackerFilesLabel;
    private javax.swing.JList<FileInformation> trackerFilesList;
    private javax.swing.JScrollPane trackerFilesScrollPane;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton uploadFileButton;
    // End of variables declaration//GEN-END:variables
}
